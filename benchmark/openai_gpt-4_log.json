{
    "problems": [
        {
            "title": "Acyclic Graph Edges",
            "category": "Additional Problems",
            "solution": "#include<bits/stdc++.h>\nusing namespace std;\n\nvector<int> adj[100005];\nbool vis[100005];\nvector<pair<int,int>> edges;\n\nvoid dfs(int node, int parent){\n    vis[node] = true;\n    for(auto child : adj[node]){\n        if(!vis[child]){\n            edges.push_back({node, child});\n            dfs(child, node);\n        }\n    }\n}\n\nint main(){\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n\n    int n, m;\n    cin >> n >> m;\n\n    for(int i=0; i<m; i++){\n        int a, b;\n        cin >> a >> b;\n        adj[a].push_back(b);\n        adj[b].push_back(a);\n    }\n\n    memset(vis, false, sizeof(vis));\n    dfs(1, -1);\n\n    for(auto edge : edges)\n        cout << edge.first << \" \" << edge.second << \"\\n\";\n\n    return 0;\n}",
            "passed_test_cases": 1,
            "total_test_cases": 4,
            "mean_time_taken": 0.10200560092926025,
            "mean_memory_used": 7744176.0,
            "failure_reasons": [
                "",
                "",
                ""
            ],
            "failed_test_cases": [
                1,
                2,
                3
            ],
            "exceeded_time_count": 0,
            "exceeded_memory_count": 0,
            "total_problems_passed": 0,
            "passed": false,
            "shots_info": {
                "shot": 1,
                "status": "failed"
            }
        }
    ],
    "total_passed_problems": 0,
    "initial_config": {
        "ignore_time_limits": false,
        "model": "gpt-4",
        "provider": "openai",
        "categories": [],
        "shots": 1
    }
}