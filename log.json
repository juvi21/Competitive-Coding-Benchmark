{
    "problems": [
        {
            "title": "Weird Algorithm",
            "category": null,
            "solution": "#include <iostream>\nusing namespace std;\n\nint main() {\n    long long n; // Use long long to handle large numbers\n    cin >> n;\n    \n    while (n != 1) {\n        cout << n << \" \";\n        if (n % 2 == 0) {\n            n /= 2;\n        } else {\n            n = n * 3 + 1;\n        }\n    }\n    cout << n << endl; // Finally print 1\n    \n    return 0;\n}",
            "passed_test_cases": 14,
            "total_test_cases": 14,
            "mean_time_taken": 0.07300123146602086,
            "mean_memory_used": 3558936.0,
            "failure_reasons": [],
            "failed_test_cases": [],
            "exceeded_time_count": 0,
            "exceeded_memory_count": 0,
            "total_problems_passed": 1,
            "passed": true
        },
        {
            "title": "Repetitions",
            "category": null,
            "solution": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string dna;\n    std::cin >> dna;\n\n    if (dna.empty()) {\n        std::cout << 0 << std::endl;\n        return 0;\n    }\n\n    int max_repetition_length = 1;\n    int current_repetition_length = 1;\n\n    for (size_t i = 1; i < dna.size(); ++i) {\n        if (dna[i] == dna[i - 1]) {\n            ++current_repetition_length;\n        } else {\n            if (current_repetition_length > max_repetition_length) {\n                max_repetition_length = current_repetition_length;\n            }\n            current_repetition_length = 1;\n        }\n    }\n\n    // Final check at the end of the loop\n    if (current_repetition_length > max_repetition_length) {\n        max_repetition_length = current_repetition_length;\n    }\n\n    std::cout << max_repetition_length << std::endl;\n\n    return 0;\n}",
            "passed_test_cases": 12,
            "total_test_cases": 12,
            "mean_time_taken": 0.08212985595067342,
            "mean_memory_used": 3559064.0,
            "failure_reasons": [],
            "failed_test_cases": [],
            "exceeded_time_count": 0,
            "exceeded_memory_count": 0,
            "total_problems_passed": 2,
            "passed": true
        }
    ],
    "total_passed_problems": 2
}